// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  모델이 변경되면 항상 migrate
//
//  DB의 unique 키 값은 최후의 보루 처럼 생각할 것
//  DB의 오류를 절대로 마주하면 안됨.
//  코드 로직을 통해 조건이 걸러질 수 있어야 함

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  userName  String    @unique
  email     String    @unique
  password  String
  bio       String?
  //이미지 저장은 url로만 할 것
  avatar    String?
  photos    Photo[]
  likes     Like[]
  followers User[]    @relation("FollowRelation", references: [id])
  following User[]    @relation("FollowRelation", references: [id])
  comment   Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Photo {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  file      String
  caption   String?
  hashtags  Hashtag[]
  likes      Like[]
  comment   Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // compound unique, 두개 이상의 속성이 합쳐져서
  // 슈퍼키의 역할을 할 때
  // ex) 한명의 유저는 하나의 사진에 한번만 좋아요를 누를 수 있다,
  // 데이터의 무결성을 지킬 수 있다.
  @@unique([userId, photoId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  photo   Photo  @relation(fields: [photoId], references: [id])
  payload String
  userId  Int
  photoId Int

  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
}
